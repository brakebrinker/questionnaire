<?php

//use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;

// use Drupal\user\Entity\User;

const EXP_QUESTIONNAIRE_PERIOD = 15811200;// 15811200 - half of the year

// hook for submition webform anketa_k_dkr
function questionnaire_hooks_form_alter(&$form, FormStateInterface $form_state, $form_id) {

    if ($form_id == 'webform_submission_anketa_k_dkr_add_form') {
        $current_user_roles = \Drupal::currentUser()->getRoles();
        $current_user_id = \Drupal::currentUser()->id();

        //check for unauthorized users
        if (\Drupal::currentUser()->isAnonymous()) {
            drupal_set_message('Доступ к анкете запрещен', 'error');
            $form['#access'] = FALSE;

            $url = Url::fromRoute('<front>');
            $response = new RedirectResponse($url->toString());
            $response->send();
        }

        //checking the membership of the questionnaire to the user
        if (isset($_GET['token']) && !empty($_GET['token'])) {
            $questionnaire_by_token = isHisQuestionnaireForUser($_GET['token']);

            $questionnaire_entity = WebformSubmission::load($questionnaire_by_token['sid']);
            $questionnaire_entity_fields = $questionnaire_entity->getData();

            if (in_array("team_lider", $current_user_roles)) {
                if ($questionnaire_entity->getOwnerId() !== $current_user_id && $questionnaire_entity_fields['id_timlida'] !== $current_user_id) {
                    drupal_set_message('Доступ к анкете запрещен', 'error');
                    $form['#access'] = FALSE;
                }
            }

            if (in_array("employee", $current_user_roles)) {
                if ($questionnaire_entity->getOwnerId() !== $current_user_id && $questionnaire_entity_fields['team_entity_sotrudnik'] !== $current_user_id) {
                    drupal_set_message('Доступ к анкете запрещен', 'error');
                    $form['#access'] = FALSE;
                }
            }
        }

        //check for employee
        if (in_array("employee", $current_user_roles)) {
            $check_quest_msg = check_questionnaire_for_employee();

            if ($check_quest_msg) {
                drupal_set_message(t($check_quest_msg), 'error');
                $form['#access'] = FALSE;
            }
        }

        foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                $form['actions'][$action]['#validate'][] = 'questionnaire_hooks_form_validate';

                //check for teamlead
                if (in_array("team_lider", $current_user_roles)) {
                    $form['actions'][$action]['#validate'][] = 'questionnaire_hooks_form_show_message_teamdlead';
                }

                //check for employee
                if (in_array("employee", $current_user_roles)) {
                    $form['actions'][$action]['#validate'][] = 'questionnaire_hooks_form_show_message_employee';
                }

            }
        }
    }
}

// show message for teamlead
function questionnaire_hooks_form_show_message_teamdlead(&$form, FormStateInterface $form_state) {

    $check_quest_msg = check_questionnaire_for_teamlead($form_state->getValue('team_entity_sotrudnik'));

    if ($check_quest_msg) {
        $form_state->setErrorByName('team_entity_sotrudnik', t($check_quest_msg));
    }
}

// show message for employee
function questionnaire_hooks_form_show_message_employee(&$form, FormStateInterface $form_state) {

    $check_quest_msg = check_questionnaire_for_employee();

    if ($check_quest_msg) {
        $form_state->setErrorByName('id_sotrudnika', t($check_quest_msg));
    }
}

// filling fields id_timlida and id_sotrudnika on submition webform
function questionnaire_hooks_form_validate(&$form, FormStateInterface $form_state) {
  $user_roles = \Drupal::currentUser()->getRoles();
  $user_id = \Drupal::currentUser()->id();
  $user_name = \Drupal::currentUser()->getUsername();
  $user_email = \Drupal::currentUser()->getEmail();

  if (in_array("team_lider", $user_roles)) {
    $filling_field_id_timlida = $form_state->getValue('id_timlida');
    $filling_field_name_timlida = $form_state->getValue('name_timlida');
    $filling_field_email_timlida = $form_state->getValue('email_timlida');
    $filling_field_email_sotrudnika_from_teamlead = $form_state->getValue('email_sotrudnika');
    $filling_field_entity_sotrudnika = $form_state->getValue('team_entity_sotrudnik');

    $user_from_uid = user_load($filling_field_entity_sotrudnika);
    $email_sotrudnika_from_field = $user_from_uid->getEmail();

    if (!$filling_field_id_timlida) {
      $form_state->setValue('id_timlida', $user_id);
    }

    if (!$filling_field_name_timlida) {
      $form_state->setValue('name_timlida', $user_name);
    }

    if (!$filling_field_email_timlida) {
      $form_state->setValue('email_timlida', $user_email);
    }

    if (!$filling_field_email_sotrudnika_from_teamlead) {
      $form_state->setValue('email_sotrudnika', $email_sotrudnika_from_field);
    }
  }

  if (in_array("employee", $user_roles)) {
    $filling_field_id_sotrudnika = $form_state->getValue('id_sotrudnika');
    $filling_field_name_sotrudnika = $form_state->getValue('name_sotrudnika');
    $filling_field_email_sotrudnika = $form_state->getValue('email_sotrudnika');

    if (!$filling_field_id_sotrudnika) {
      $form_state->setValue('id_sotrudnika', $user_id);
    }

    if (!$filling_field_name_sotrudnika) {
      $form_state->setValue('name_sotrudnika', $user_name);
    }

    if (!$filling_field_email_sotrudnika) {
      $form_state->setValue('email_sotrudnika', $user_email);
    }

  }
  // \Drupal::logger(' id_timlida')->notice('id_timlida 19 submit ');
}

// hook for webform_block (пока не использовать)
//function questionnaire_hooks_block_view_webform_block_alter(array &$build, BlockPluginInterface $block) {
//  if ($block->getBaseId() === 'webform_block') {
//    $build['#pre_render'][] = '_questionnaire_hooks_block_webform_block_prerender';
//  }
//}

// checking last create questionnaire (пока не использовать)
//function _questionnaire_hooks_block_webform_block_prerender(array $build) {
//    $current_user_id = \Drupal::currentUser()->id();
//    $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
//    $current_user_roles = \Drupal::currentUser()->getRoles();
//
//    $expired_questionnaire_date = time() - EXP_QUESTIONNAIRE_PERIOD;
//
//    print_r($current_user->get('field_select_users')->getValue());
//
//    if (in_array("employee", $current_user_roles)) {
//        if (!empty($webform_update_url = check_questionnaire_for_employee($current_user_id, $expired_questionnaire_date))) {
//            drupal_set_message(t('Вы уже заполняли анкету в ближайшие пол года. Можете отредактировать <a href="' . $webform_update_url . '">предыдущую анкету</a>.'), 'error');
//            return;
//        }
//    }
//
//    return $build;
//}

// check last questionnare for current employee
function check_questionnaire_for_employee() {

    $returned_msg = '';

    $expired_date = time() - EXP_QUESTIONNAIRE_PERIOD;
    $user_id = \Drupal::currentUser()->id();

    $last_submission = issetOldQuestionnaireForUser($user_id);

    if (!empty($last_submission)) {
        $webform_submission = WebformSubmission::load($last_submission['sid']);
        $submission_data_fields = $webform_submission->getData();

        if ($webform_submission->getCreatedTime() > $expired_date && empty($submission_data_fields['id_sotrudnika']) && !isset($_GET['token'])) {
            $webform_update_url = $webform_submission->getTokenUrl()->toString();
            $returned_msg = 'Анкета уже создана. Перейдите по <a href="' . $webform_update_url . '">ссылке</a> для ее редактирования';
        }
    }

    return $returned_msg;
}

// check last questionnare for current employee filling teamlead
function check_questionnaire_for_teamlead($employ_id) {

    $returned_msg = '';

    if (!isHisEmployee($employ_id)) {
        $returned_msg = 'Этот сотрудник за вами не закреплен.';
    } else {
        $expired_date = time() - EXP_QUESTIONNAIRE_PERIOD;

        $last_submission = issetOldQuestionnaireForUser($employ_id);

        if (!empty($last_submission)) {
            $webform_submission = WebformSubmission::load($last_submission['sid']);
            $submission_data_fields = $webform_submission->getData();

            if ($webform_submission->getCreatedTime() > $expired_date && empty($submission_data_fields['id_timlida'])) {
                $webform_update_url = $webform_submission->getTokenUrl()->toString();
                $returned_msg = 'Анкета для этого пользователя уже существует. Перейдите по <a href="' . $webform_update_url . '">ссылке</a> для ее заполнения.';
            }
            if ($webform_submission->getCreatedTime() > $expired_date && !empty($submission_data_fields['id_timlida'])) {
                $webform_update_url = $webform_submission->getTokenUrl()->toString();
                $returned_msg = 'Вы уже заполняли анкету для этого пользователя. Можете перейти по <a href="' . $webform_update_url . '">ссылке</a> для ее редактирования.';
            }
        }
    }

    return $returned_msg;
}

// checks whether the employee refers to teamlead
function isHisEmployee($employ_id) {

    $current_user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());

    $his_employees = $current_user->get('field_select_users')->getValue();

    foreach ($his_employees as $employee) {
        if (in_array($employ_id, $employee)) {
            return true;
        }
    }

    return false;
}

// db query for check employee and teamlead
function issetOldQuestionnaireForUser($user_id) {

    $submission_query = \Drupal::database()->select('webform_submission', 'ws');
    $submission_query->fields('ws', ['sid']);

    $condition_or = new \Drupal\Core\Database\Query\Condition('OR');
    $condition_or->condition('ws.uid', $user_id);
    $condition_or->condition('wsd.value', $user_id);

    $submission_query->join('webform_submission_data', 'wsd', 'wsd.sid = ws.sid');

    $submission_query->condition($condition_or);
    $submission_query->condition('wsd.name', 'team_entity_sotrudnik');

    $submission_query->orderBy('ws.created', 'DESC');

    $last_submission = $submission_query->execute()->fetchAssoc();

    return $last_submission;

}

// db query for check the uid by a token
function isHisQuestionnaireForUser($token_questionnare) {

    $submission_query = \Drupal::database()->select('webform_submission', 'ws');
    $submission_query->fields('ws', ['sid']);

    $submission_query->condition('ws.token', $token_questionnare);

    $token_submission = $submission_query->execute()->fetchAssoc();

    return $token_submission;

}
